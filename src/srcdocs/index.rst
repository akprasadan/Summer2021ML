Welcome to Aklearn's documentation!
========================================

Building a Machine Learning (ML) Library From Scratch
------------------------------------------------------------

This website contains documentation for my Summer 2021 project, to build a library to perform machine learning (ML) in Python, in the spirit of Tidymodels in R or Sklearn in Python. As much as possible, I will implement all algorithms from scratch (no calling sklearn!); for instance, I will solve GLMs by numerically optimizing the likelihood functions, but I won't attempt to implement the numerical optimizer itself. The algorithms will be organized using Python classes to keep the code D-R-Y, and will be supplemented by classes offering data processing, train-test splitting, cross-validating, and model evaluation functionality.

My motivation for this project is to upgrade my skills in data science and programming in Python, to complement what I have already learned in R. I want to particularly improve my abilities with object oriented programming, numpy, numba, and general data analysis/visualization. In addition, I want to explore the 'ecosystem' of software engineering: using version control, good code organization, detailed and effective documentation, and usability (for others). Thus, for the first time on my own volition, I will use Git on my computer for version control, using a 2 branch (development and main) workflow, and push changes to Github. I will use Sphinx to automatically carry over my documentation to this website, which was produced by both Sphinx and Read the Docs. 

I Want to Get Started
-------------------------

- See the :ref:`TOC` 
- Check out :ref:`quickstartlabel`

Progress So Far (in both workflow and explicit code)
-----------------------------------------------------

Workflow
^^^^^^^^^
- Consistent use of Git/Github for version control and website generation.
- Increased familiarity with 'virtual environments' and organizing Python files into packages.
- Autogenerated documentation: this website; essentially, I write documentation in my code and include text files with additional content, and I run 4 commands (build the HTML website using Sphinx and 3 Git commands) and the webpage automatically collects all of the documentation into this elegant form.

Algorithms
^^^^^^^^^^^
- A :ref:`reg` class, and child classes including :ref:`lin`, :ref:`pois`, and :ref:`knnreg`.
- A :ref:`classif` class, and child classes including :ref:`logist`, :ref:`knnclass`, and :ref:`qdaclass`.
- A :ref:`cluster` class, and a :ref:`kmean` child class.
- Model evaluation techniques

Data Engineering and Preparation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Train/test splitting functionality in :ref:`data_prep`.
- Cross-validation fold generation
- Scaling/standardizing data

Unit Testing (successful)
^^^^^^^^^^^^^^^^^^^^^^^^^^
- Linear regression agrees with sklearn 
- The preprocessing functionality (see previous heading)
- Model evaluation (accuracy + confusion matrix)


To Do (in the next 2 weeks):
------------------------------

- Linear discriminant analysis (re-using my QDA code)
- LASSO? Other penalized estimators
-  bootstrapping functionality
- Abstract tuning class and incorporation into child classes
- Start to add more exposition and examples into the website, for (hypothetical) users

To do (eventually):
----------------------

- Classification trees, bagging, random forests
- Boosting
- Support vector machines
- Stacking functionality

.. _TOC:

Table of Contents
===================

.. toctree::
   quickguide.md
   regression.rst
   classification.rst
   clustering.rst
   evaluation_metrics.rst
   preprocessing.rst
   


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
